name: Mutation Testing CI

on: [push, pull_request]
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  mutation-test:
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v3

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: ✅ Add BugsInPy CLI to PATH
      run: echo "$GITHUB_WORKSPACE/BugsInPy/framework/bin" >> $GITHUB_PATH

    - name: 🐍 Confirm Python version
      run: |
        python --version
        which python

    - name: 📥 Install dependencies
      run: |
        pip install -r mutmut/requirements.txt || true
        pip install -e mutmut || true
        pip install python_toolbox
        pip install requests
        pip install PyYAML

    # Ollama는 ai-action으로 실행
    - name: 🤖 Start Ollama using ai-action
      uses: ai-action/ollama-action@v1
      with:
        model: codellama:7b-instruct

    # Ollama API 엔드포인트를 /api/generate로 수정
    - name: ✅ Verify Ollama is responding
      run: |
        curl -X POST http://localhost:11434/api/generate \
          -H "Content-Type: application/json" \
          -d '{"model": "codellama:7b-instruct", "prompt": "Say hello!", "stream": false}'
          
    - name: 🐶 Install reviewdog
      run: |
        curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b ./
        echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH

    - name: 🧪 Run diff-based mutation testing on bug
      run: |
        python run_bug_test.py

    - name: 📤 Upload mutation results
      uses: actions/upload-artifact@v4
      with:
        name: mutation-results
        path: /tmp/bug-project/**/mutants/survived_mutants.json

    - name: 📥 Move mutant file to expected location
      run: |
        mkdir -p mutants
        cp $(find /tmp/bug-project -name "survived_mutants.json" | head -n 1) mutants/

    # config.yaml 생성 (explainer.py에서 사용)
    - name: 📝 Create config.yaml for explainer
      run: |
        echo "olama_url: 'http://localhost:11434/api/generate'" > config.yaml
        echo "olama_model: 'codellama:7b-instruct'" >> config.yaml

    # explainer.py 실행, TT
    - name: 🤖 Run Ollama mutant explainer
      run: |
        python generate_report.py
        
    - name: 📤 Upload explained mutant file
      uses: actions/upload-artifact@v4
      with: 
        name: mutant-explanations
        path: mutants/survived_mutants_with_explanations.json
       
    - name: 🛠️ Touch mutated lines to force diff
      run: |
        python touch_mutated_lines.py
       
    - name: 🐶 Annotate PR with Reviewdog
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./reviewdog -f=rdjson \
          -name="CAMILA" \
          -reporter=github-pr-review \
          -level=warning \
          -fail-on-error=false \
          < mutmut_report.rdjson
      
    - name: 🆕 Create new issue with LLM mutant explanations
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "### 🧬 LLM Mutant Feedback Summary" > issue_body.md

        jq -c '.[]' mutants/survived_mutants_with_explanations.json | while read -r row; do
          file=$(echo "$row" | jq -r '.source_file')
          mutant=$(echo "$row" | jq -r '.mutant_name')
          why=$(echo "$row" | jq -r '.why' | tr '\n' ' ')
          fix=$(echo "$row" | jq -r '.fix' | tr '\n' ' ')
          example=$(echo "$row" | jq -r '.example_test' | tr '\n' ' ')
          echo -e "\n---\n🔬 \`$mutant\` in \`$file\`\n- **Why**: $why\n- **Fix**: $fix\n- **Test Suggestion**: \`$example\`" >> issue_body.md
        done

        gh issue create \
          --title "🧬 Mutation Feedback for $GITHUB_SHA" \
          --body-file issue_body.md


